// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: pb/vector/vector.proto

package vector

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VectorClient is the client API for Vector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VectorClient interface {
	StoreToVectorDB(ctx context.Context, in *DataVectorRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
}

type vectorClient struct {
	cc grpc.ClientConnInterface
}

func NewVectorClient(cc grpc.ClientConnInterface) VectorClient {
	return &vectorClient{cc}
}

func (c *vectorClient) StoreToVectorDB(ctx context.Context, in *DataVectorRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/pb.vector.Vector/StoreToVectorDB", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VectorServer is the server API for Vector service.
// All implementations must embed UnimplementedVectorServer
// for forward compatibility
type VectorServer interface {
	StoreToVectorDB(context.Context, *DataVectorRequest) (*wrapperspb.BoolValue, error)
	mustEmbedUnimplementedVectorServer()
}

// UnimplementedVectorServer must be embedded to have forward compatible implementations.
type UnimplementedVectorServer struct {
}

func (UnimplementedVectorServer) StoreToVectorDB(context.Context, *DataVectorRequest) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreToVectorDB not implemented")
}
func (UnimplementedVectorServer) mustEmbedUnimplementedVectorServer() {}

// UnsafeVectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VectorServer will
// result in compilation errors.
type UnsafeVectorServer interface {
	mustEmbedUnimplementedVectorServer()
}

func RegisterVectorServer(s grpc.ServiceRegistrar, srv VectorServer) {
	s.RegisterService(&Vector_ServiceDesc, srv)
}

func _Vector_StoreToVectorDB_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataVectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VectorServer).StoreToVectorDB(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.vector.Vector/StoreToVectorDB",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VectorServer).StoreToVectorDB(ctx, req.(*DataVectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Vector_ServiceDesc is the grpc.ServiceDesc for Vector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Vector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.vector.Vector",
	HandlerType: (*VectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreToVectorDB",
			Handler:    _Vector_StoreToVectorDB_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/vector/vector.proto",
}
